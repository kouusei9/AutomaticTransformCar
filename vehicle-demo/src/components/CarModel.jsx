import { useEffect, forwardRef, useImperativeHandle, useRef } from "react"
import * as THREE from "three"
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js"
import gsap from "gsap"

export default forwardRef(function CarModel({ scene, camera, controls, pathRef }, ref) {
  const modelRootRef = useRef(null)
  const hasLoadedRef = useRef(false) // ‚úÖ Èò≤Ê≠¢ÈáçÂ§çÂä†ËΩΩ
  const lightRef = useRef(null)
  const tRef = useRef(0) // Ë∑ØÁ∫øËøõÂ∫¶ [0~1]

  useImperativeHandle(ref, () => ({
    fly: () => modelRootRef.current && transformToFlyMode(modelRootRef.current),
    reset: () => modelRootRef.current && resetPosition(modelRootRef.current),
    startDrive: () => startDriving(),
  }))

  useEffect(() => {
    if (!scene || hasLoadedRef.current) return // üö´ Ëã•Â∑≤Âä†ËΩΩÂàôÁõ¥Êé•Ë∑≥Ëøá

    const loader = new GLTFLoader()
    loader.load(
      "/car.gltf",
      (gltf) => {
        const modelRoot = gltf.scene
        modelRootRef.current = modelRoot
        hasLoadedRef.current = true // ‚úÖ Ê†áËÆ∞Â∑≤Âä†ËΩΩ

        // Ê∏ÖÁêÜÊóßÊ®°ÂûãÔºàÁ°Æ‰øùÂú∫ÊôØ‰∏≠Âè™Êúâ‰∏Ä‰∏™Ôºâ
        scene.children
          .filter(o => o.userData.isCar)
          .forEach(o => scene.remove(o))

        modelRoot.userData.isCar = true
        scene.add(modelRoot)
        console.log("‚úÖ Ê®°ÂûãÂ∑≤Âä†ËΩΩ:", modelRoot)

        // Â±Ö‰∏≠Áº©Êîæ
        // const bbox = new THREE.Box3().setFromObject(modelRoot)
        // const center = bbox.getCenter(new THREE.Vector3())
        // const size = bbox.getSize(new THREE.Vector3())
        // modelRoot.position.sub(center)
        // const maxDim = Math.max(size.x, size.y, size.z)
        // modelRoot.scale.setScalar(8 / maxDim)

        // Ë∞ÉÊï¥Áõ∏Êú∫
        camera.position.set(0, 5, 20)
        controls.target.set(0, 0, 0)
        camera.lookAt(0, 0, 0)

        // ÂÖâÊ∫ê
        // const light = new THREE.PointLight(0xffffff, 5)
        // light.position.set(10, 10, 10)
        // lightRef.current = light
        // scene.add(light)

        console.log("üé® Ê®°ÂûãÊòæÁ§∫Â∑≤ÂáÜÂ§áÂÆåÊàê")
      },
      undefined,
      (err) => console.error("‚ùå GLTF Âä†ËΩΩÂ§±Ë¥•:", err)
    )

    // Ê∏ÖÁêÜ
    return () => {
      if (modelRootRef.current) {
        console.log("üßπ ÁßªÈô§Ê®°Âûã")
        scene.remove(modelRootRef.current)
        modelRootRef.current = null
        hasLoadedRef.current = false
      }
      if (lightRef.current) {
        scene.remove(lightRef.current)
        lightRef.current = null
      }
    }
  }, [scene, camera, controls])

  // üåÄ È£ûË°åÂä®Áîª
  function transformToFlyMode(car) {
    gsap.to(car.scale, { x: 1.5, y: 0.2, z: 2, duration: 1 })
    gsap.to(car.rotation, { x: -Math.PI / 6, duration: 1 })
    gsap.to(car.position, { y: 20, duration: 2 })
  }

  // üõ¨ ÂõûÂú∞Âä®Áîª
  function resetPosition(car) {
    gsap.to(car.scale, { x: 1, y: 1, z: 1, duration: 1 })
    gsap.to(car.rotation, { x: 0, duration: 1 })
    gsap.to(car.position, { y: 0, duration: 2 })
  }

  // üöó Âä®ÁîªÂáΩÊï∞
  function startDriving() {
    const car = modelRootRef.current
    const curve = pathRef.current?.getPath?.()
    if (!car || !curve) return console.warn("Ë∑ØÂæÑÊú™ÂáÜÂ§áÂ•Ω")

    // ‰ªéËµ∑ÁÇπÂºÄÂßã
    gsap.to(tRef, {
      current: 1,
      duration: 10,
      ease: "none",
      onUpdate: () => {
        const pos = curve.getPointAt(tRef.current)
        const tangent = curve.getTangentAt(tRef.current)

        car.position.copy(pos)
        const quaternion = new THREE.Quaternion().setFromUnitVectors(
          new THREE.Vector3(0, 0, 1),
          tangent.normalize()
        )
        car.quaternion.slerp(quaternion, 0.1)

        // Áõ∏Êú∫Ë∑üÈöè
        const camOffset = new THREE.Vector3(0, 5, 15)
        const camPos = pos.clone().add(camOffset.applyQuaternion(car.quaternion))
        camera.position.lerp(camPos, 0.1)
        camera.lookAt(car.position)
      },
    })
  }

  return null
})